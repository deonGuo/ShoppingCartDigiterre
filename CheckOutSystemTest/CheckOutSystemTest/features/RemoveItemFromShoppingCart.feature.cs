// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CheckOutSystemTest.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Remove item lines from shopping cart", Description="\tIn order to not purchase items I no longer want\r\n\tAs a customer\r\n\tI want to remo" +
        "ve item lines from my shopping cart", SourceFile="features\\RemoveItemFromShoppingCart.feature", SourceLine=0)]
    public partial class RemoveItemLinesFromShoppingCartFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RemoveItemFromShoppingCart.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Remove item lines from shopping cart", "\tIn order to not purchase items I no longer want\r\n\tAs a customer\r\n\tI want to remo" +
                    "ve item lines from my shopping cart", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("cart test injection", new string[] {
                "testInjection"}, SourceLine=13)]
        public virtual void CartTestInjection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("cart test injection", new string[] {
                        "testInjection"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("I have an empty shopping cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
testRunner.And("I add apple with quantity 10 to the cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
testRunner.And("I add orange with quantity 20 to the cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
testRunner.When("I display cart content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void Remove1ExistingLineItemFromCart(string product, string quantity, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove 1 existing lineItem from cart", @__tags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given(string.Format("the cart has an item line of {0} with quantity {1}", product, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When(string.Format("I remove item line of {0} with quantity {1} from the cart", product, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then(string.Format("the cart does not contain a line item {0} with quantity {1}", product, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove 1 existing lineItem from cart, Variant 0", new string[] {
                "positive"}, SourceLine=26)]
        public virtual void Remove1ExistingLineItemFromCart_Variant0()
        {
#line 21
this.Remove1ExistingLineItemFromCart("apple", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove 1 existing lineItem from cart, Variant 1", new string[] {
                "positive"}, SourceLine=26)]
        public virtual void Remove1ExistingLineItemFromCart_Variant1()
        {
#line 21
this.Remove1ExistingLineItemFromCart("apple", "99", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove 1 existing lineItem from cart, Variant 2", new string[] {
                "positive"}, SourceLine=26)]
        public virtual void Remove1ExistingLineItemFromCart_Variant2()
        {
#line 21
this.Remove1ExistingLineItemFromCart("orange", "5", ((string[])(null)));
#line hidden
        }
        
        public virtual void RemoveAnLineItemFromEmptyCart(string quantity, string product, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove an line item from empty Cart", @__tags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.When(string.Format("I remove item line of {0} with quantity {1} from the cart", product, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then(string.Format("the cart does not contain a line item {0} with quantity {1}", product, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove an line item from empty Cart, Variant 0", new string[] {
                "negative"}, SourceLine=37)]
        public virtual void RemoveAnLineItemFromEmptyCart_Variant0()
        {
#line 33
this.RemoveAnLineItemFromEmptyCart("1", "apple", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove an line item from empty Cart, Variant 1", new string[] {
                "negative"}, SourceLine=37)]
        public virtual void RemoveAnLineItemFromEmptyCart_Variant1()
        {
#line 33
this.RemoveAnLineItemFromEmptyCart("1", "orange", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove an line item from empty Cart, Variant 2", new string[] {
                "negative"}, SourceLine=37)]
        public virtual void RemoveAnLineItemFromEmptyCart_Variant2()
        {
#line 33
this.RemoveAnLineItemFromEmptyCart("2", "banana", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove an line item from empty Cart, Variant 3", new string[] {
                "negative"}, SourceLine=37)]
        public virtual void RemoveAnLineItemFromEmptyCart_Variant3()
        {
#line 33
this.RemoveAnLineItemFromEmptyCart("-100", "orange", ((string[])(null)));
#line hidden
        }
        
        public virtual void RemoveAnLineItemFromCartThatContainsItemLinesOfSameProductButDifferentQuantity(string product, string quantity1, string quantity2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove an line item from Cart that contains item lines of same product but differ" +
                    "ent quantity", @__tags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given(string.Format("the cart has an item line of {0} with quantity {1}", product, quantity1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.When(string.Format("I remove item line of {0} with quantity {1} from the cart", product, quantity2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then(string.Format("the cart contains a line item {0} with quantity {1}", product, quantity1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove an line item from Cart that contains item lines of same product but differ" +
            "ent quantity, apple", new string[] {
                "negative"}, SourceLine=50)]
        public virtual void RemoveAnLineItemFromCartThatContainsItemLinesOfSameProductButDifferentQuantity_Apple()
        {
#line 45
this.RemoveAnLineItemFromCartThatContainsItemLinesOfSameProductButDifferentQuantity("apple", "1", "2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove an line item from Cart that contains item lines of same product but differ" +
            "ent quantity, orange", new string[] {
                "negative"}, SourceLine=50)]
        public virtual void RemoveAnLineItemFromCartThatContainsItemLinesOfSameProductButDifferentQuantity_Orange()
        {
#line 45
this.RemoveAnLineItemFromCartThatContainsItemLinesOfSameProductButDifferentQuantity("orange", "2", "1", ((string[])(null)));
#line hidden
        }
        
        public virtual void Remove2LineItemsFromCart(string product1, string quantity1, string product2, string quantity2, string product3, string quantity3, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove 2 line items from cart", @__tags);
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given(string.Format("the cart has an item line of {0} with quantity {1}", product1, quantity1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.And(string.Format("the cart has an item line of {0} with quantity {1}", product2, quantity2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And(string.Format("the cart has an item line of {0} with quantity {1}", product3, quantity3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.When(string.Format("I remove item line of {0} with quantity {1} from the cart", product1, quantity1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.And(string.Format("I remove item line of {0} with quantity {1} from the cart", product2, quantity2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.Then(string.Format("the cart contains a line item {0} with quantity {1}", product3, quantity3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.And(string.Format("the cart does not contain a line item {0} with quantity {1}", product1, quantity1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And(string.Format("the cart does not contain a line item {0} with quantity {1}", product2, quantity2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove 2 line items from cart, apple", new string[] {
                "positive"}, SourceLine=66)]
        public virtual void Remove2LineItemsFromCart_Apple()
        {
#line 56
this.Remove2LineItemsFromCart("apple", "1", "orange", "2", "apple", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove 2 line items from cart, orange", new string[] {
                "positive"}, SourceLine=66)]
        public virtual void Remove2LineItemsFromCart_Orange()
        {
#line 56
this.Remove2LineItemsFromCart("orange", "1", "orange", "2", "orange", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove an line item from cart that contains multiple matching line items", SourceLine=71)]
        public virtual void RemoveAnLineItemFromCartThatContainsMultipleMatchingLineItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove an line item from cart that contains multiple matching line items", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Remove all line items from cart", SourceLine=74)]
        public virtual void RemoveAllLineItemsFromCart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove all line items from cart", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CheckOutSystemTest.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("UpdateItemFromShoppingCart", Description="\tIn order to make changes to the shopping cart\r\n\tAs a customer\r\n\tI want to update" +
        " item lines from my shopping cart", SourceFile="features\\UpdateItemFromShoppingCart.feature", SourceLine=0)]
    public partial class UpdateItemFromShoppingCartFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdateItemFromShoppingCart.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdateItemFromShoppingCart", "\tIn order to make changes to the shopping cart\r\n\tAs a customer\r\n\tI want to update" +
                    " item lines from my shopping cart", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void Update2LineItemsFromCart(string product1, string quantity1, string quantity1S, string product2, string quantity2, string quantity2S, string product3, string quantity3, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update 2 line items from cart", @__tags);
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given(string.Format("the cart has an item line of {0} with quantity {1}", product1, quantity1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And(string.Format("the cart has an item line of {0} with quantity {1}", product2, quantity2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And(string.Format("the cart has an item line of {0} with quantity {1}", product3, quantity3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When(string.Format("I update item line of {0} with quantity {1} to quantity {2} from the cart", product1, quantity1, quantity1S), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.And(string.Format("I update item line of {0} with quantity {1} to quantity {2} from the cart", product2, quantity2, quantity2S), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.Then(string.Format("the cart contains a line item {0} with quantity {1}", product1, quantity1S), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.And(string.Format("the cart contains a line item {0} with quantity {1}", product2, quantity2S), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And(string.Format("the cart contains a line item {0} with quantity {1}", product3, quantity3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And(string.Format("the cart does not contain a line item {0} with quantity {1}", product1, quantity1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And(string.Format("the cart does not contain a line item {0} with quantity {1}", product2, quantity2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update 2 line items from cart, apple", new string[] {
                "positive"}, SourceLine=21)]
        public virtual void Update2LineItemsFromCart_Apple()
        {
#line 9
this.Update2LineItemsFromCart("apple", "1", "10", "orange", "2", "20", "apple", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update 2 line items from cart, orange", new string[] {
                "positive"}, SourceLine=21)]
        public virtual void Update2LineItemsFromCart_Orange()
        {
#line 9
this.Update2LineItemsFromCart("orange", "1", "10", "orange", "2", "20", "orange", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("update line items that do not exist", SourceLine=27)]
        public virtual void UpdateLineItemsThatDoNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("update line items that do not exist", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("update quantity to invalid amount (0, negative, float)", SourceLine=30)]
        public virtual void UpdateQuantityToInvalidAmount0NegativeFloat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("update quantity to invalid amount (0, negative, float)", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion

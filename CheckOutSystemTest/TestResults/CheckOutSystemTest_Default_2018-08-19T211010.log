2018-08-19T21:10:10.3394333+01:00;VSTestExecutionThread;Info;SpecFlow+Runner execution started
2018-08-19T21:10:10.4461480+01:00;VSTestExecutionThread;Info;SpecRun Evaluation Mode: Please purchase at http://www.specflow.org/plus to remove test execution delay.
2018-08-19T21:10:10.4461480+01:00;VSTestExecutionThread;Info;SpecRun: running tests in C:\Users\deong\source\repos\CheckOutSystemTest\CheckOutSystemTest\bin\Debug\CheckOutSystemTest.dll
2018-08-19T21:10:10.4461480+01:00;VSTestExecutionThread;Info;Profile: Default
2018-08-19T21:10:22.5182357+01:00;Thread#13;Info;Discovering target: Default
2018-08-19T21:10:22.5182357+01:00;Thread#13;Info;Discovering tests from assembly: C:\Users\deong\source\repos\CheckOutSystemTest\CheckOutSystemTest\bin\Debug\CheckOutSystemTest.dll
Appdomain Disposed
Test Suite Dump
#0: CheckOutSystemTest/Default - 
#1: Default - 
#2: CheckOutSystemTest - 
#3: Add products to shopping cart - 
#4: Add Valid Products To the Cart, Variant 0 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+Valid+Products+To+the+Cart%2c+Variant+0
#5: Add Valid Products To the Cart, Variant 1 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+Valid+Products+To+the+Cart%2c+Variant+1
#6: Add Valid Products To the Cart, Variant 2 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+Valid+Products+To+the+Cart%2c+Variant+2
#7: Add Valid Products To the Cart, Variant 3 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+Valid+Products+To+the+Cart%2c+Variant+3
#8: Add Valid Products To the Cart and calculate Total, Variant 0 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+Valid+Products+To+the+Cart+and+calculate+Total%2c+Variant+0
#9: Add Valid Products To the Cart and calculate Total, Variant 1 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+Valid+Products+To+the+Cart+and+calculate+Total%2c+Variant+1
#10: Add Valid Products To the Cart and calculate Total, Variant 2 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+Valid+Products+To+the+Cart+and+calculate+Total%2c+Variant+2
#11: Add Valid Products To the Cart and calculate Total, Variant 3 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+Valid+Products+To+the+Cart+and+calculate+Total%2c+Variant+3
#12: Add invalid quantity of products to the cart, 0 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+invalid+quantity+of+products+to+the+cart%2c+0
#13: Add invalid quantity of products to the cart, -1 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+invalid+quantity+of+products+to+the+cart%2c+-1
#14: Add invalid quantity of products to the cart, 0.5 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+invalid+quantity+of+products+to+the+cart%2c+0.5
#15: Add invalid quantity of products to the cart, 10.5 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+invalid+quantity+of+products+to+the+cart%2c+10.5
#16: Add invalid products to the cart and check valid products are added, 1 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+invalid+products+to+the+cart+and+check+valid+products+are+added%2c+1
#17: Add invalid products to the cart and check valid products are added, 2 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+invalid+products+to+the+cart+and+check+valid+products+are+added%2c+2
#18: Add invalid products to the cart and calculate total, 1 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+invalid+products+to+the+cart+and+calculate+total%2c+1
#19: Add invalid products to the cart and calculate total, 2 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+invalid+products+to+the+cart+and+calculate+total%2c+2
#20: Add valid products multiple times to the cart and check valid products are added, Variant 0 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+valid+products+multiple+times+to+the+cart+and+check+valid+products+are+added%2c+Variant+0
#21: Add valid products multiple times to the cart and check valid products are added, Variant 1 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+valid+products+multiple+times+to+the+cart+and+check+valid+products+are+added%2c+Variant+1
#22: Add valid products multiple times to the cart and check valid products are added, Variant 2 - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+valid+products+multiple+times+to+the+cart+and+check+valid+products+are+added%2c+Variant+2
#23: Add a mixture of valid and invalid products to the cart and check valid products are added and invalid ones not, orange - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+a+mixture+of+valid+and+invalid+products+to+the+cart+and+check+valid+products+are+added+and+invalid+ones+not%2c+orange
#24: Add a mixture of valid and invalid products to the cart and check valid products are added and invalid ones not, apple - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+a+mixture+of+valid+and+invalid+products+to+the+cart+and+check+valid+products+are+added+and+invalid+ones+not%2c+apple
#25: Add a mixture of valid and invalid products to the cart and calculate the total, orange - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+a+mixture+of+valid+and+invalid+products+to+the+cart+and+calculate+the+total%2c+orange
#26: Add a mixture of valid and invalid products to the cart and calculate the total, apple - TestAssembly:CheckOutSystemTest/Feature:Add+products+to+shopping+cart/Scenario:Add+a+mixture+of+valid+and+invalid+products+to+the+cart+and+calculate+the+total%2c+apple
End: Test Suite Dump
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #4 from normal test queue 
Thread#0:Scheduler: considering testitem #4 for thread 0
Thread#0:TestItem#4:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#4:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#4:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #4 for thread 0
Thread#0:Scheduler: Test #4 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread #0: creating new test thread executor for CheckOutSystemTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null (target: Default)
Loading SpecRun type 'TechTalk.SpecRun.Framework.TestAssemblyExecutor' from: C:\Users\deong\AppData\Local\Temp\VisualStudioTestExplorerExtensions\SpecRun.Runner.1.7.2\tools\TechTalk.SpecRun.Framework.Executor.dll
Thread#0: Test #4/0 is started on thread #0
Thread#0:T:-> Using app.config
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:Then the cart contains a line item apple with quantity 1
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("apple", "1") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #5 from normal test queue 
Thread#0:Scheduler: considering testitem #5 for thread 0
Thread#0:TestItem#5:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#5:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#5:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #5 for thread 0
Thread#0:Scheduler: Test #5 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #4/0 is finished on thread #0 as Succeeded within 0.3945423 seconds
Thread#0: Test #5/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "1") (0.0s)
Thread#0:B:Then the cart contains a line item orange with quantity 1
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "1") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #6 from normal test queue 
Thread#0:Scheduler: considering testitem #6 for thread 0
Thread#0:TestItem#6:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#6:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#6:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #6 for thread 0
Thread#0:Scheduler: Test #6 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #5/0 is finished on thread #0 as Succeeded within 0.0009936 seconds
Thread#0: Test #6/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 2 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "2") (0.0s)
Thread#0:B:Then the cart contains a line item apple with quantity 2
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("apple", "2") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #7 from normal test queue 
Thread#0:Scheduler: considering testitem #7 for thread 0
Thread#0:TestItem#7:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#7:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#7:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #7 for thread 0
Thread#0:Scheduler: Test #7 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #6/0 is finished on thread #0 as Succeeded within 0.0010348 seconds
Thread#0: Test #7/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 1000 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "1000") (0.0s)
Thread#0:B:Then the cart contains a line item orange with quantity 1000
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "1000") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #8 from normal test queue 
Thread#0:Scheduler: considering testitem #8 for thread 0
Thread#0:TestItem#8:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#8:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#8:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #8 for thread 0
Thread#0:Scheduler: Test #8 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #7/0 is finished on thread #0 as Succeeded within 0.0009973 seconds
Thread#0: Test #8/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:Then the total cost is 60 pence
Thread#0:T:done: AddToShoppingCart.ThenTheTotalCostIsPence(60) (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #9 from normal test queue 
Thread#0:Scheduler: considering testitem #9 for thread 0
Thread#0:TestItem#9:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#9:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#9:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #9 for thread 0
Thread#0:Scheduler: Test #9 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #8/0 is finished on thread #0 as Succeeded within 0.0059456 seconds
Thread#0: Test #9/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "1") (0.0s)
Thread#0:B:Then the total cost is 25 pence
Thread#0:T:done: AddToShoppingCart.ThenTheTotalCostIsPence(25) (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #10 from normal test queue 
Thread#0:Scheduler: considering testitem #10 for thread 0
Thread#0:TestItem#10:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#10:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#10:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #10 for thread 0
Thread#0:Scheduler: Test #10 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #9/0 is finished on thread #0 as Succeeded within 0.0009978 seconds
Thread#0: Test #10/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 2 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "2") (0.0s)
Thread#0:B:Then the total cost is 120 pence
Thread#0:T:done: AddToShoppingCart.ThenTheTotalCostIsPence(120) (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #11 from normal test queue 
Thread#0:Scheduler: considering testitem #11 for thread 0
Thread#0:TestItem#11:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#11:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#11:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #11 for thread 0
Thread#0:Scheduler: Test #11 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #10/0 is finished on thread #0 as Succeeded within 0.0009967 seconds
Thread#0: Test #11/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 1000 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "1000") (0.0s)
Thread#0:B:Then the total cost is 25000 pence
Thread#0:T:done: AddToShoppingCart.ThenTheTotalCostIsPence(25000) (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #12 from normal test queue 
Thread#0:Scheduler: considering testitem #12 for thread 0
Thread#0:TestItem#12:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#12:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#12:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #12 for thread 0
Thread#0:Scheduler: Test #12 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #11/0 is finished on thread #0 as Succeeded within 0.0039906 seconds
Thread#0: Test #12/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 0 to the cart
Thread#0:T:quantity cannot be negative
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "0") (0.0s)
Thread#0:B:Then the cart does not contain a line item apple with quantity 0
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("apple", "0") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #13 from normal test queue 
Thread#0:Scheduler: considering testitem #13 for thread 0
Thread#0:TestItem#13:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#13:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#13:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #13 for thread 0
Thread#0:Scheduler: Test #13 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #12/0 is finished on thread #0 as Succeeded within 0.0019956 seconds
Thread#0: Test #13/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity -1 to the cart
Thread#0:T:quantity cannot be negative
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "-1") (0.0s)
Thread#0:B:Then the cart does not contain a line item orange with quantity -1
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("orange", "-1") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #14 from normal test queue 
Thread#0:Scheduler: considering testitem #14 for thread 0
Thread#0:TestItem#14:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#14:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#14:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #14 for thread 0
Thread#0:Scheduler: Test #14 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #13/0 is finished on thread #0 as Succeeded within 0.0009957 seconds
Thread#0: Test #14/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 0.5 to the cart
Thread#0:T:System.FormatException: Input string was not in a correct format.
Thread#0:T:   at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer& number, NumberFormatInfo info, Boolean parseDecimal)
Thread#0:T:   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
Thread#0:T:   at System.Int32.Parse(String s)
Thread#0:T:   at CheckOutSystemTest.stepDefinition.AddToShoppingCart.WhenIAddWithQuantityToTheCart(String productName, String quantity) in C:\Users\deong\source\repos\CheckOutSystemTest\CheckOutSystemTest\stepDefinition\AddToShoppingCart.cs:line 41
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "0.5") (0.0s)
Thread#0:B:Then the cart does not contain a line item apple with quantity 0.5
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("apple", "0.5") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #15 from normal test queue 
Thread#0:Scheduler: considering testitem #15 for thread 0
Thread#0:TestItem#15:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#15:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#15:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #15 for thread 0
Thread#0:Scheduler: Test #15 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #14/0 is finished on thread #0 as Succeeded within 0.0029944 seconds
Thread#0: Test #15/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 10.5 to the cart
Thread#0:T:System.FormatException: Input string was not in a correct format.
Thread#0:T:   at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer& number, NumberFormatInfo info, Boolean parseDecimal)
Thread#0:T:   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
Thread#0:T:   at System.Int32.Parse(String s)
Thread#0:T:   at CheckOutSystemTest.stepDefinition.AddToShoppingCart.WhenIAddWithQuantityToTheCart(String productName, String quantity) in C:\Users\deong\source\repos\CheckOutSystemTest\CheckOutSystemTest\stepDefinition\AddToShoppingCart.cs:line 41
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "10.5") (0.0s)
Thread#0:B:Then the cart does not contain a line item orange with quantity 10.5
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("orange", "10.5") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #16 from normal test queue 
Thread#0:Scheduler: considering testitem #16 for thread 0
Thread#0:TestItem#16:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#16:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#16:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #16 for thread 0
Thread#0:Scheduler: Test #16 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #15/0 is finished on thread #0 as Succeeded within 0.0019935 seconds
Thread#0: Test #16/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add banana with quantity 1 to the cart
Thread#0:T:Product [BANANA] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("banana", "1") (0.0s)
Thread#0:B:Then the cart does not contain a line item banana with quantity 1
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("banana", "1") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #17 from normal test queue 
Thread#0:Scheduler: considering testitem #17 for thread 0
Thread#0:TestItem#17:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#17:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#17:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #17 for thread 0
Thread#0:Scheduler: Test #17 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #16/0 is finished on thread #0 as Succeeded within 0.001993 seconds
Thread#0: Test #17/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add watermelon with quantity 2 to the cart
Thread#0:T:Product [WATERMELON] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("watermelon", "2") (0.0s)
Thread#0:B:Then the cart does not contain a line item watermelon with quantity 2
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("watermelon", "2") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #18 from normal test queue 
Thread#0:Scheduler: considering testitem #18 for thread 0
Thread#0:TestItem#18:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#18:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#18:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #18 for thread 0
Thread#0:Scheduler: Test #18 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #17/0 is finished on thread #0 as Succeeded within 0.0019966 seconds
Thread#0: Test #18/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add banana with quantity 1 to the cart
Thread#0:T:Product [BANANA] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("banana", "1") (0.0s)
Thread#0:B:Then the total cost is 0 pence
Thread#0:T:done: AddToShoppingCart.ThenTheTotalCostIsPence(0) (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #19 from normal test queue 
Thread#0:Scheduler: considering testitem #19 for thread 0
Thread#0:TestItem#19:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#19:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#19:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #19 for thread 0
Thread#0:Scheduler: Test #19 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #18/0 is finished on thread #0 as Succeeded within 0.0009963 seconds
Thread#0: Test #19/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add watermelon with quantity 2 to the cart
Thread#0:T:Product [WATERMELON] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("watermelon", "2") (0.0s)
Thread#0:B:Then the total cost is 0 pence
Thread#0:T:done: AddToShoppingCart.ThenTheTotalCostIsPence(0) (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #20 from normal test queue 
Thread#0:Scheduler: considering testitem #20 for thread 0
Thread#0:TestItem#20:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#20:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#20:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #20 for thread 0
Thread#0:Scheduler: Test #20 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #19/0 is finished on thread #0 as Succeeded within 0.0009967 seconds
Thread#0: Test #20/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 10 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "10") (0.0s)
Thread#0:B:And I add apple with quantity 20 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "20") (0.0s)
Thread#0:B:And I add orange with quantity 10 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "10") (0.0s)
Thread#0:B:Then the cart contains a line item orange with quantity 10
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "10") (0.0s)
Thread#0:B:And the cart contains a line item apple with quantity 20
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("apple", "20") (0.0s)
Thread#0:B:And the cart contains a line item orange with quantity 10
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "10") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #21 from normal test queue 
Thread#0:Scheduler: considering testitem #21 for thread 0
Thread#0:TestItem#21:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#21:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#21:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #21 for thread 0
Thread#0:Scheduler: Test #21 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #20/0 is finished on thread #0 as Succeeded within 0.0019956 seconds
Thread#0: Test #21/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "1") (0.0s)
Thread#0:B:And I add orange with quantity 2 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "2") (0.0s)
Thread#0:B:And I add orange with quantity 3 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "3") (0.0s)
Thread#0:B:Then the cart contains a line item orange with quantity 1
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "1") (0.0s)
Thread#0:B:And the cart contains a line item orange with quantity 2
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "2") (0.0s)
Thread#0:B:And the cart contains a line item orange with quantity 3
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "3") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #22 from normal test queue 
Thread#0:Scheduler: considering testitem #22 for thread 0
Thread#0:TestItem#22:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#22:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#22:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #22 for thread 0
Thread#0:Scheduler: Test #22 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #21/0 is finished on thread #0 as Succeeded within 0.0009962 seconds
Thread#0: Test #22/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 9999 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "9999") (0.0s)
Thread#0:B:And I add orange with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "1") (0.0s)
Thread#0:B:And I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:Then the cart contains a line item apple with quantity 9999
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("apple", "9999") (0.0s)
Thread#0:B:And the cart contains a line item orange with quantity 1
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "1") (0.0s)
Thread#0:B:And the cart contains a line item apple with quantity 1
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("apple", "1") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #23 from normal test queue 
Thread#0:Scheduler: considering testitem #23 for thread 0
Thread#0:TestItem#23:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#23:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#23:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #23 for thread 0
Thread#0:Scheduler: Test #23 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #22/0 is finished on thread #0 as Succeeded within 0.0009983 seconds
Thread#0: Test #23/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 10 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "10") (0.0s)
Thread#0:B:And I add banana with quantity 2 to the cart
Thread#0:T:Product [BANANA] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("banana", "2") (0.0s)
Thread#0:B:And I add orange with quantity 10 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "10") (0.0s)
Thread#0:B:And I add apple with quantity -1 to the cart
Thread#0:T:quantity cannot be negative
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "-1") (0.0s)
Thread#0:B:And I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:Then the cart contains a line item orange with quantity 10
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "10") (0.0s)
Thread#0:B:And the cart does not contain a line item banana with quantity 2
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("banana", "2") (0.0s)
Thread#0:B:And the cart contains a line item orange with quantity 10
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "10") (0.0s)
Thread#0:B:And the cart does not contain a line item apple with quantity -1
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("apple", "-1") (0.0s)
Thread#0:B:And the cart contains a line item apple with quantity 1
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("apple", "1") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #24 from normal test queue 
Thread#0:Scheduler: considering testitem #24 for thread 0
Thread#0:TestItem#24:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#24:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#24:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #24 for thread 0
Thread#0:Scheduler: Test #24 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #23/0 is finished on thread #0 as Succeeded within 0.0019935 seconds
Thread#0: Test #24/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:And I add watermelon with quantity 10 to the cart
Thread#0:T:Product [WATERMELON] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("watermelon", "10") (0.0s)
Thread#0:B:And I add apple with quantity 2 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "2") (0.0s)
Thread#0:B:And I add apple with quantity 0 to the cart
Thread#0:T:quantity cannot be negative
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "0") (0.0s)
Thread#0:B:And I add orange with quantity 9999 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "9999") (0.0s)
Thread#0:B:Then the cart contains a line item apple with quantity 1
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("apple", "1") (0.0s)
Thread#0:B:And the cart does not contain a line item watermelon with quantity 10
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("watermelon", "10") (0.0s)
Thread#0:B:And the cart contains a line item apple with quantity 2
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("apple", "2") (0.0s)
Thread#0:B:And the cart does not contain a line item apple with quantity 0
Thread#0:T:done: AddToShoppingCart.ThenTheCartDoesNotContainALineItemWithQuantity("apple", "0") (0.0s)
Thread#0:B:And the cart contains a line item orange with quantity 9999
Thread#0:T:done: AddToShoppingCart.ThenTheCartContainALineItemWithQuantity("orange", "9999") (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #25 from normal test queue 
Thread#0:Scheduler: considering testitem #25 for thread 0
Thread#0:TestItem#25:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#25:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#25:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #25 for thread 0
Thread#0:Scheduler: Test #25 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #24/0 is finished on thread #0 as Succeeded within 0.0020059 seconds
Thread#0: Test #25/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add orange with quantity 10 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "10") (0.0s)
Thread#0:B:And I add banana with quantity 2 to the cart
Thread#0:T:Product [BANANA] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("banana", "2") (0.0s)
Thread#0:B:And I add orange with quantity 10 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "10") (0.0s)
Thread#0:B:And I add apple with quantity -1 to the cart
Thread#0:T:quantity cannot be negative
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "-1") (0.0s)
Thread#0:B:And I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:Then the total cost is 560 pence
Thread#0:T:done: AddToShoppingCart.ThenTheTotalCostIsPence(560) (0.0s)
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: testitem #26 from normal test queue 
Thread#0:Scheduler: considering testitem #26 for thread 0
Thread#0:TestItem#26:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#26:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#26:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #26 for thread 0
Thread#0:Scheduler: Test #26 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 0
Thread#0: Test #25/0 is finished on thread #0 as Succeeded within 0.0009973 seconds
Thread#0: Test #26/0 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:And I add watermelon with quantity 10 to the cart
Thread#0:T:Product [WATERMELON] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("watermelon", "10") (0.0s)
Thread#0:B:And I add apple with quantity 2 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "2") (0.0s)
Thread#0:B:And I add apple with quantity 0 to the cart
Thread#0:T:quantity cannot be negative
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "0") (0.0s)
Thread#0:B:And I add orange with quantity 9999 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "9999") (0.0s)
Thread#0:B:Then the total cost is 2501550 pence
Thread#0:T:error: Assert.AreEqual failed. Expected:<2501550>. Actual:<250155>. 
Thread#0:TestItem#26:Scheduler: reschedule tests for testitem #26
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: dequeuing a rescheduled testitem: #26
Thread#0:Scheduler: considering testitem #26 for thread 0
Thread#0:TestItem#26:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#26:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#26:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #26 for thread 0
Thread#0:Scheduler: Test #26 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 1
Thread#0: Test #26/0 is finished on thread #0 as Failed within 0.0139628 seconds
Thread#0: Test #26/1 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:And I add watermelon with quantity 10 to the cart
Thread#0:T:Product [WATERMELON] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("watermelon", "10") (0.0s)
Thread#0:B:And I add apple with quantity 2 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "2") (0.0s)
Thread#0:B:And I add apple with quantity 0 to the cart
Thread#0:T:quantity cannot be negative
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "0") (0.0s)
Thread#0:B:And I add orange with quantity 9999 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "9999") (0.0s)
Thread#0:B:Then the total cost is 2501550 pence
Thread#0:T:error: Assert.AreEqual failed. Expected:<2501550>. Actual:<250155>. 
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: dequeuing a rescheduled testitem: #26
Thread#0:Scheduler: considering testitem #26 for thread 0
Thread#0:TestItem#26:testItemMatchesCurrentTestThread:UnSpecific
Thread#0:TestItem#26:runsOnOneOtherThreadSpecific:False
Thread#0:TestItem#26:runsOnOneOtherThreadUnspecific:False
Thread#0:Scheduler: using testitem #26 for thread 0
Thread#0:Scheduler: Test #26 is scheduled for thread
Thread#0:Scheduler: with testItemExecutionIndex 2
Thread#0: Test #26/1 is finished on thread #0 as Failed within 0.0029918 seconds
Thread#0: Test #26/2 is started on thread #0
Thread#0:B:Given I have an empty shopping cart
Thread#0:T:done: AddToShoppingCart.GivenIHaveAnEmptyShoppingCart() (0.0s)
Thread#0:B:When I add apple with quantity 1 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "1") (0.0s)
Thread#0:B:And I add watermelon with quantity 10 to the cart
Thread#0:T:Product [WATERMELON] NOT available from the catalogue.
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("watermelon", "10") (0.0s)
Thread#0:B:And I add apple with quantity 2 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "2") (0.0s)
Thread#0:B:And I add apple with quantity 0 to the cart
Thread#0:T:quantity cannot be negative
Thread#0:T:Item NOT added
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("apple", "0") (0.0s)
Thread#0:B:And I add orange with quantity 9999 to the cart
Thread#0:T:done: AddToShoppingCart.WhenIAddWithQuantityToTheCart("orange", "9999") (0.0s)
Thread#0:B:Then the total cost is 2501550 pence
Thread#0:T:error: Assert.AreEqual failed. Expected:<2501550>. Actual:<250155>. 
Thread#0:Scheduler: get next test for thread 0
Thread#:Scheduler: at the end of normal test queue
Thread#0:Scheduler: enumerator for thread is at end
Thread#0:Scheduler: No more tests for thread
Thread#0: Test #26/2 is finished on thread #0 as Failed within 0.003034 seconds
Appdomain Disposed
Thread#-1:Scheduler: get next test for thread -1
Thread#:Scheduler: at the end of normal test queue
Thread#-1:Scheduler: enumerator for thread is at end
Total: 23 (test executions: 25)
Succeeded: 22
Ignored: 0
Pending: 0
Skipped: 0
Failed: 1
